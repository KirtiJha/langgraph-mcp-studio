export const API_TEMPLATES = [
  {
    id: "rest-crud",
    name: "REST CRUD API",
    description:
      "Standard REST API with Create, Read, Update, Delete operations",
    category: "rest" as const,
    tags: ["rest", "crud", "standard"],
    config: {
      name: "REST CRUD API",
      description: "A RESTful API with standard CRUD operations",
      baseUrl: "https://api.example.com",
      timeout: 30000,
      retries: 3,
      authentication: { type: "apikey" as const, credentials: {} },
      globalHeaders: {
        "Content-Type": "application/json",
        Accept: "application/json",
      } as Record<string, string>,
      caching: {
        enabled: true,
        defaultTtl: 300,
        maxSize: 1000,
      },
      monitoring: {
        enabled: true,
        healthCheck: { endpoint: "/health", interval: 30 },
        metrics: { enabled: true, retention: 7 },
      },
      logging: {
        level: "info" as const,
        requests: true,
        responses: false,
        errors: true,
      },
    },
    endpoints: [
      {
        path: "/api/items",
        method: "GET" as const,
        toolName: "list_items",
        description: "Get all items",
        parameters: [
          {
            name: "page",
            type: "number" as const,
            required: false,
            description: "Page number",
            defaultValue: 1,
          },
          {
            name: "limit",
            type: "number" as const,
            required: false,
            description: "Items per page",
            defaultValue: 10,
            validation: { min: 1, max: 100 },
          },
          {
            name: "sort",
            type: "string" as const,
            required: false,
            description: "Sort field",
          },
        ],
        enabled: true,
      },
      {
        path: "/api/items/{id}",
        method: "GET" as const,
        toolName: "get_item",
        description: "Get item by ID",
        parameters: [
          {
            name: "id",
            type: "string" as const,
            required: true,
            description: "Item ID",
          },
        ],
        enabled: true,
      },
      {
        path: "/api/items",
        method: "POST" as const,
        toolName: "create_item",
        description: "Create a new item",
        parameters: [
          {
            name: "name",
            type: "string" as const,
            required: true,
            description: "Item name",
          },
          {
            name: "description",
            type: "string" as const,
            required: false,
            description: "Item description",
          },
          {
            name: "category",
            type: "string" as const,
            required: false,
            description: "Item category",
          },
        ],
        body: {
          type: "json" as const,
          required: true,
          schema: {
            type: "object",
            properties: {
              name: { type: "string" },
              description: { type: "string" },
              category: { type: "string" },
            },
            required: ["name"],
          },
        },
        enabled: true,
      },
      {
        path: "/api/items/{id}",
        method: "PUT" as const,
        toolName: "update_item",
        description: "Update an existing item",
        parameters: [
          {
            name: "id",
            type: "string" as const,
            required: true,
            description: "Item ID",
          },
        ],
        enabled: true,
      },
      {
        path: "/api/items/{id}",
        method: "DELETE" as const,
        toolName: "delete_item",
        description: "Delete an item",
        parameters: [
          {
            name: "id",
            type: "string" as const,
            required: true,
            description: "Item ID",
          },
        ],
        enabled: true,
      },
    ],
  },
  {
    id: "graphql-api",
    name: "GraphQL API",
    description: "GraphQL API server with queries and mutations",
    category: "graphql" as const,
    tags: ["graphql", "query", "mutation"],
    config: {
      name: "GraphQL API",
      description: "A GraphQL API server",
      baseUrl: "https://api.example.com",
      timeout: 45000,
      retries: 2,
      authentication: { type: "bearer" as const, credentials: {} },
      globalHeaders: {
        "Content-Type": "application/json",
      } as Record<string, string>,
    },
    endpoints: [
      {
        path: "/graphql",
        method: "POST" as const,
        toolName: "graphql_query",
        description: "Execute GraphQL query",
        parameters: [
          {
            name: "query",
            type: "string" as const,
            required: true,
            description: "GraphQL query string",
          },
          {
            name: "variables",
            type: "object" as const,
            required: false,
            description: "Query variables",
          },
        ],
        enabled: true,
      },
    ],
  },
  {
    id: "webhook-handler",
    name: "Webhook Handler",
    description: "Webhook receiver and processor",
    category: "webhook" as const,
    tags: ["webhook", "events", "callbacks"],
    config: {
      name: "Webhook Handler",
      description: "Handle incoming webhooks and events",
      baseUrl: "https://webhook.example.com",
      timeout: 15000,
      retries: 5,
      authentication: { type: "custom" as const, credentials: {} },
      rateLimit: {
        requests: 100,
        windowMs: 60000,
        strategy: "sliding" as const,
      },
    },
    endpoints: [
      {
        path: "/webhook",
        method: "POST" as const,
        toolName: "process_webhook",
        description: "Process incoming webhook",
        parameters: [
          {
            name: "event",
            type: "string" as const,
            required: true,
            description: "Event type",
          },
          {
            name: "payload",
            type: "object" as const,
            required: true,
            description: "Event payload",
          },
        ],
        enabled: true,
      },
      {
        path: "/webhook/status",
        method: "GET" as const,
        toolName: "webhook_status",
        description: "Get webhook processing status",
        parameters: [],
        enabled: true,
      },
    ],
  },
  {
    id: "microservice-api",
    name: "Microservice API",
    description: "Production-ready microservice with comprehensive monitoring",
    category: "rest" as const,
    tags: ["microservice", "production", "monitoring", "scalable"],
    config: {
      name: "Microservice API",
      description: "A production-ready microservice with full observability",
      baseUrl: "https://microservice.example.com",
      timeout: 30000,
      retries: 3,
      authentication: { type: "jwt" as const, credentials: {} },
      globalHeaders: {
        "Content-Type": "application/json",
        "X-Service-Version": "1.0.0",
      } as Record<string, string>,
      rateLimit: {
        requests: 1000,
        windowMs: 60000,
        strategy: "sliding" as const,
      },
      caching: {
        enabled: true,
        defaultTtl: 600,
        maxSize: 5000,
      },
      monitoring: {
        enabled: true,
        healthCheck: { endpoint: "/health", interval: 10 },
        metrics: { enabled: true, retention: 30 },
      },
      logging: {
        level: "info" as const,
        requests: true,
        responses: true,
        errors: true,
      },
    },
    endpoints: [
      {
        path: "/health",
        method: "GET" as const,
        toolName: "health_check",
        description: "Service health check",
        parameters: [],
        enabled: true,
      },
      {
        path: "/metrics",
        method: "GET" as const,
        toolName: "get_metrics",
        description: "Get service metrics",
        parameters: [],
        enabled: true,
      },
      {
        path: "/api/v1/resources",
        method: "GET" as const,
        toolName: "list_resources",
        description: "List all resources",
        parameters: [
          {
            name: "filter",
            type: "string" as const,
            required: false,
            description: "Filter criteria",
          },
          {
            name: "sort",
            type: "string" as const,
            required: false,
            description: "Sort order",
          },
          {
            name: "page",
            type: "number" as const,
            required: false,
            description: "Page number",
            validation: { min: 1 },
          },
          {
            name: "size",
            type: "number" as const,
            required: false,
            description: "Page size",
            validation: { min: 1, max: 100 },
          },
        ],
        caching: { enabled: true, ttl: 300 },
        enabled: true,
      },
    ],
  },
  {
    id: "postman-collection",
    name: "Postman Collection Import",
    description:
      "Import API endpoints from a Postman Collection v2.1 JSON file",
    category: "import" as const,
    tags: ["postman", "import", "collection"],
    config: {
      name: "Postman API Collection",
      description: "API server generated from Postman collection import",
      baseUrl: "https://api.example.com",
      timeout: 30000,
      retries: 3,
      authentication: { type: "apikey" as const, credentials: {} },
      globalHeaders: {
        "Content-Type": "application/json",
        "User-Agent": "MCP-Studio/1.0.0",
      } as Record<string, string>,
      monitoring: {
        enabled: true,
        healthCheck: { endpoint: "/health", interval: 30 },
        metrics: { enabled: true, retention: 7 },
      },
      logging: {
        level: "info" as const,
        requests: true,
        responses: true,
        errors: true,
      },
    },
    endpoints: [
      {
        path: "/api/example",
        method: "GET" as const,
        toolName: "example_request",
        description: "Example endpoint from Postman collection",
        parameters: [
          {
            name: "id",
            type: "string" as const,
            required: false,
            description: "Example parameter",
          },
        ],
        enabled: true,
      },
    ],
  },
];
