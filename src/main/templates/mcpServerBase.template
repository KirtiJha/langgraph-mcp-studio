#!/usr/bin/env node

import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";
import fetch from "node-fetch";
import { createHash } from "crypto";

// Server configuration
const SERVER_CONFIG = {{SERVER_CONFIG}};

interface RequestCache {
  [key: string]: {
    data: any;
    timestamp: number;
    ttl: number;
  };
}

class MCPAPIServer {
  private server: Server;
  private cache: RequestCache = {};

  constructor() {
    this.server = new Server(
      {
        name: SERVER_CONFIG.name || "MCP API Server",
        version: "1.0.0",
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupToolHandlers();
    this.setupErrorHandling();
  }

  private setupToolHandlers() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
{{TOOLS}}
        ]
      };
    });

    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      try {
{{TOOL_HANDLERS}}
        
        throw new Error("Unknown tool: " + name);
      } catch (error) {
        return {
          content: [
            {
              type: "text",
              text: "Error executing tool " + name + ": " + (error instanceof Error ? error.message : String(error)),
            },
          ],
          isError: true,
        };
      }
    });
  }

  private setupErrorHandling() {
    this.server.onerror = (error) => {
      console.error("[MCP Error]", error);
    };

    process.on("SIGINT", async () => {
      await this.server.close();
      process.exit(0);
    });
  }

  private isValidCacheEntry(entry: any, ttl: number): boolean {
    return entry && (Date.now() - entry.timestamp) < ttl;
  }

  private generateCacheKey(method: string, url: string, params: any = {}): string {
    const paramsStr = JSON.stringify(params);
    return createHash('md5').update(method + ":" + url + ":" + paramsStr).digest('hex');
  }

{{MAKE_API_CALL}}

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error("MCP API Server running on stdio");
  }
}

const server = new MCPAPIServer();
server.run().catch(console.error);
